// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler.go
//
// Generated by this command:
//
//	mockgen -source scheduler.go -package=mock -destination=mock/scheduler.go
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	rollup "github.com/ozontech/ch-rollup/pkg/rollup"
	gomock "go.uber.org/mock/gomock"
)

// MockRollUp is a mock of RollUp interface.
type MockRollUp struct {
	ctrl     *gomock.Controller
	recorder *MockRollUpMockRecorder
}

// MockRollUpMockRecorder is the mock recorder for MockRollUp.
type MockRollUpMockRecorder struct {
	mock *MockRollUp
}

// NewMockRollUp creates a new mock instance.
func NewMockRollUp(ctrl *gomock.Controller) *MockRollUp {
	mock := &MockRollUp{ctrl: ctrl}
	mock.recorder = &MockRollUpMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRollUp) EXPECT() *MockRollUpMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockRollUp) Run(ctx context.Context, opts rollup.RunOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, opts)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockRollUpMockRecorder) Run(ctx, opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockRollUp)(nil).Run), ctx, opts)
}
