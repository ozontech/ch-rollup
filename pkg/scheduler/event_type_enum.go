// Code generated by "enumer -type=EventType -trimprefix=EventType -output=event_type_enum.go"; DO NOT EDIT.

package scheduler

import (
	"fmt"
)

const _EventTypeName = "RollUp"

var _EventTypeIndex = [...]uint8{0, 6}

func (i EventType) String() string {
	i -= 1
	if i >= EventType(len(_EventTypeIndex)-1) {
		return fmt.Sprintf("EventType(%d)", i+1)
	}
	return _EventTypeName[_EventTypeIndex[i]:_EventTypeIndex[i+1]]
}

var _EventTypeValues = []EventType{1}

var _EventTypeNameToValueMap = map[string]EventType{
	_EventTypeName[0:6]: 1,
}

// EventTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EventTypeString(s string) (EventType, error) {
	if val, ok := _EventTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to EventType values", s)
}

// EventTypeValues returns all values of the enum
func EventTypeValues() []EventType {
	return _EventTypeValues
}

// IsAEventType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i EventType) IsAEventType() bool {
	for _, v := range _EventTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
