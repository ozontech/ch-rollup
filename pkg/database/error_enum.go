// Code generated by "enumer -type=QueryErrorType -trimprefix=Err -output=error_enum.go"; DO NOT EDIT.

package database

import (
	"fmt"
)

const _QueryErrorTypeName = "UnknownTableTableAlreadyExists"

var _QueryErrorTypeIndex = [...]uint8{0, 12, 30}

func (i QueryErrorType) String() string {
	i -= 1
	if i >= QueryErrorType(len(_QueryErrorTypeIndex)-1) {
		return fmt.Sprintf("QueryErrorType(%d)", i+1)
	}
	return _QueryErrorTypeName[_QueryErrorTypeIndex[i]:_QueryErrorTypeIndex[i+1]]
}

var _QueryErrorTypeValues = []QueryErrorType{1, 2}

var _QueryErrorTypeNameToValueMap = map[string]QueryErrorType{
	_QueryErrorTypeName[0:12]:  1,
	_QueryErrorTypeName[12:30]: 2,
}

// QueryErrorTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func QueryErrorTypeString(s string) (QueryErrorType, error) {
	if val, ok := _QueryErrorTypeNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to QueryErrorType values", s)
}

// QueryErrorTypeValues returns all values of the enum
func QueryErrorTypeValues() []QueryErrorType {
	return _QueryErrorTypeValues
}

// IsAQueryErrorType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i QueryErrorType) IsAQueryErrorType() bool {
	for _, v := range _QueryErrorTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
